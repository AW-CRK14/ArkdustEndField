plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.80'
}

version = main_mod_id
group = mod_group_id

repositories {
    mavenLocal()

    maven {
        url "https://mvn.cloud.alipay.com/nexus/content/repositories/open/"
    }

    maven{
        url 'https://maven.aliyun.com/nexus/content/groups/public/'
    }

    maven {
        url 'https://maven.aliyun.com/nexus/content/repositories/google'
    }

    maven {
        name 'IzzelAliz Maven'
        url 'https://maven.izzel.io/releases/'
    }

    maven {
        name 'Curse Maven'
        url = "https://www.cursemaven.com"
    }

    maven { // Registrate
        url "https://maven.tterrag.com/"
    }
}

jarJar.enable()

jarJar { }

//tasks.jarJar.finalizedBy('reobfJarJar')

configurations {
    library
    implementation.extendsFrom library
}


minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
//
//    configureEach {
//        mods {
//            brea { source project(":BreakdownCore").sourceSets.main }
//        }
//    }
}

base {
    archivesName = main_mod_id
}



// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'info'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.main_mod_id

//        property 'mixin.env.remapRefMap', 'true'
//        property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.main_mod_id
        programArgument '--nogui'

//        property 'mixin.env.remapRefMap', 'true'
//        property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.main_mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.main_mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.

    implementation "net.neoforged:neoforge:${neo_version}"
    implementation project(":BreakdownCore")
//    runtimeOnly project(':BreakdownCore')
//    implementation "curse.maven:modern-ui-352491:5040141"



    // Modern UI core framework
    library "icyllis.modernui:ModernUI-Core:${modernui_version}"
    // Modern UI core extensions
    library "icyllis.modernui:ModernUI-Markdown:${modernui_version}"
    // Modern UI for Minecraft Forge
    compileOnly "curse.maven:modern-ui-${modernui_path}"
    runtimeOnly "curse.maven:modern-ui-${modernui_path}"

    implementation "com.tterrag.registrate:Registrate:${rege_version}"
    jarJar(group: 'com.tterrag.registrate', name: 'Registrate', version: rege_version_range)

}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : main_mod_id, mod_name: main_mod_name, mod_license: main_mod_license, mod_version: main_mod_version,
            mod_authors         : arkdust_mod_authors, mod_description: arkdust_mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

//tasks.getByName(":neoFormJoined1.20.4-20231207.154220DownloadAssets") {
//    dependsOn("BreakdownCore:neoFormJoined1.20.4-20231207.154220DownloadAssets")
//}
